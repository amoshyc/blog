<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>numpy on Yu-Cheng Huang</title>
    <link>http://amoshyc.github.io/blog/tags/numpy.html</link>
    <description>Recent content in numpy on Yu-Cheng Huang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Oct 2018 15:13:10 +0800</lastBuildDate>
    
	<atom:link href="http://amoshyc.github.io/blog/tags/numpy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pairwise Difference in Numpy and PyTorch</title>
      <link>http://amoshyc.github.io/blog/2018/pairwise-difference-in-numpy-and-pytorch.html</link>
      <pubDate>Wed, 03 Oct 2018 15:13:10 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/pairwise-difference-in-numpy-and-pytorch.html</guid>
      <description>問題 給定維度 [N, D] 的矩陣 A，與 [M, D] 的矩陣 B，輸出維度 [N, M, D] 的矩陣 C，其中 C[i, j] 代表向量 A[i] 與向量 B[j] 的差，即 A[i] - B[j]。
矩陣化 最直覺的做法，兩個 for 迭代一下，簡單：
1 2 3  for i, a in enumerate(A): for j, b in enumerate(B): C[i, j] = a - b   但這個的計算速度非常非常慢，我們可以將這個計算改寫成矩陣的型式，讓 Numpy/Pytorch 可以利用 SIMD/GPU 來加速計算。
我們想讓結果是兩個矩陣 C1, C2 相減，即 C = C1 - C2，由此避掉大量的 indexing。其中，C1, C2 的維度都是 [N, M, D]。至此問題變成 C1, C2 分別是什麼。畫一下圖，發揮一下空間感，可以發現：</description>
    </item>
    
    <item>
      <title>Numpy 中實現二維高斯分佈</title>
      <link>http://amoshyc.github.io/blog/2018/implement-2d-gaussian-distribution-in-numpy.html</link>
      <pubDate>Sat, 03 Mar 2018 15:46:53 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/implement-2d-gaussian-distribution-in-numpy.html</guid>
      <description>前情 最近讀了 Pose Estimation 相關的論文，發現一些 Bottom Up 的方法 1 2 會直接生成各個 Keypoints 會哪，中間不經過 RPN 等方法。而生成的 Confidence Map 的 Ground Truth 是使用高斯分佈 (Gaussian Distribution) 來指示位置。但我翻了一下文檔，numpy 似乎沒有提供生成二維高斯分佈的函式，只提供從高斯分佈取樣的函式，於是我模彷了 skimage.draw 的 API，寫了一個函式。
實作原理 二維高斯分佈就是兩個一維高斯分佈取外積。於是我分別對 row 與 col 各生成一個高斯分佈，函數 domain 為 $$ [sigma-3sigma, sigma+3sigma] $$，因為是整數域，共 $$ 6sigma + 1 $$ 個值。然後將這兩個分佈使用 np.outer 即為所求。
程式碼 Hint!  此函式不支援 double 型態的 mu 與 sigma！   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  def gaussian2d(mu, sigma, shape=None): &amp;#34;&amp;#34;&amp;#34;Generate 2d gaussian distribution coordinates and values.</description>
    </item>
    
  </channel>
</rss>