<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pytorch on Yu-Cheng Huang</title>
    <link>http://amoshyc.github.io/blog/tags/pytorch.html</link>
    <description>Recent content in pytorch on Yu-Cheng Huang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Feb 2019 22:39:40 +0800</lastBuildDate>
    
	<atom:link href="http://amoshyc.github.io/blog/tags/pytorch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Grad-CAM Using Pytorch</title>
      <link>http://amoshyc.github.io/blog/2019/grad-cam-using-pytorch.html</link>
      <pubDate>Tue, 26 Feb 2019 22:39:40 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2019/grad-cam-using-pytorch.html</guid>
      <description>簡介 之前在打一個 regression 的比賽，發現 Grad-CAM 是一個很好用的可視化工具。於是我在網路上找了一下 Pytorch 的 implementation，找到 kazuto1011 實現得不錯。只是程式碼有點過於複雜，且只適用於 classificaiton 問題。所以我修改了他的程式碼，並包上 Context Manager，來讓程式碼更符合我的風格。
原理 待補
實作 Grad-CAM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  class GradCam: def __init__(self, model, layers): self.model = model self.</description>
    </item>
    
    <item>
      <title>Peek of 2D Heatmap</title>
      <link>http://amoshyc.github.io/blog/2019/peek-of-2d-heatmap.html</link>
      <pubDate>Mon, 14 Jan 2019 01:21:36 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2019/peek-of-2d-heatmap.html</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  def peek2d(lbl): &amp;#39;&amp;#39;&amp;#39; Args: lbl: (FloatTensor) sized [N, 4, H, W] Return: kpt: (FloatTensor) sized [N, 4, 2] &amp;#39;&amp;#39;&amp;#39; N, _, H, W = lbl.size() device = lbl.device lbl = lbl.view(N, 4, H * W) loc = lbl.argmax(dim=2) # [N, 4] yy, xx = loc / W, loc % W # [N, 4], [N, 4] kpt = torch.</description>
    </item>
    
    <item>
      <title>Reproducible PyTorch</title>
      <link>http://amoshyc.github.io/blog/2019/reproducible-pytorch.html</link>
      <pubDate>Thu, 10 Jan 2019 18:53:38 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2019/reproducible-pytorch.html</guid>
      <description>將以下程式碼加在程式的 entry point，透過設定 seed 的方式，來讓整個訓練過程能夠複現。只在 pytorch 1.0 測試過，不保證其他版本也有相同效果。
1 2 3 4 5  seed = 999 random.seed(seed) np.random.seed(seed) torch.manual_seed(seed) torch.backends.cudnn.deterministic = True   </description>
    </item>
    
    <item>
      <title>Pairwise Difference in Numpy and PyTorch</title>
      <link>http://amoshyc.github.io/blog/2018/pairwise-difference-in-numpy-and-pytorch.html</link>
      <pubDate>Wed, 03 Oct 2018 15:13:10 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/pairwise-difference-in-numpy-and-pytorch.html</guid>
      <description>問題 給定維度 [N, D] 的矩陣 A，與 [M, D] 的矩陣 B，輸出維度 [N, M, D] 的矩陣 C，其中 C[i, j] 代表向量 A[i] 與向量 B[j] 的差，即 A[i] - B[j]。
矩陣化 最直覺的做法，兩個 for 迭代一下，簡單：
1 2 3  for i, a in enumerate(A): for j, b in enumerate(B): C[i, j] = a - b   但這個的計算速度非常非常慢，我們可以將這個計算改寫成矩陣的型式，讓 Numpy/Pytorch 可以利用 SIMD/GPU 來加速計算。
我們想讓結果是兩個矩陣 C1, C2 相減，即 C = C1 - C2，由此避掉大量的 indexing。其中，C1, C2 的維度都是 [N, M, D]。至此問題變成 C1, C2 分別是什麼。畫一下圖，發揮一下空間感，可以發現：</description>
    </item>
    
  </channel>
</rss>