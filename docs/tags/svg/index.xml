<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>“svg&#34; on Yu-Cheng Huang</title>
    <link>http://amoshyc.github.io/blog/tags/svg.html</link>
    <description>Recent content in “svg&#34; on Yu-Cheng Huang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Oct 2018 00:27:00 +0800</lastBuildDate>
    
	<atom:link href="http://amoshyc.github.io/blog/tags/svg/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 Svgwrite 來可視化圖片</title>
      <link>http://amoshyc.github.io/blog/2018/visualization-with-svgwrite.html</link>
      <pubDate>Sun, 21 Oct 2018 00:27:00 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/visualization-with-svgwrite.html</guid>
      <description> Introduction 許多 CV 問題都需要可視化，不管是可視化原始的資料，還是模型的預測結果，可視化總讓人能以直觀的方法了解你 code 有沒有寫錯，或模型是不是有什麼弱點。而有一大類的可視化不是生成圖表，而是必須在圖上標記，例如 Human Pose Estimation 與 Object Detection。
目前大家的做法是利用 OpenCV, Pillow 或 Skimage 直接把 edge, keypoint, text 畫在該圖片上，即直接修改該圖片的 pixel。也有不少人是用 matplotlib 來做可視化。但這兩種方法我都不太喜歡，他們都會有失真的問題。當你把圖片放大時，你會發現可視化的部份會變得模糊，線條尤為明顯，如下圖：
TODO
另外還有一些原因，上述的函式庫不容易畫出理想的圖形，例如 Skimage 畫不少太小的圓形、Pillow 沒法指定矩形的邊的粗細等等。為了解決這些問題（沒辦法，我就是受不了），我決定使用 svgwrite 來做這種「在圖片上標記」的可視化 1，也就是說我將圖片內嵌到 SVG 中，然後再加入一些 SVG 的 element，例如 Circle, Rect, Text 等來做可視化 2。
SVG 有著許多優點，例如他是向量圖形所以可視化部份不會有失真的問題，而且他內建的那個 element 有著許多參數可以調整，舉凡顏色、粗細等他都有著類似於 CSS 的一致 API，也因此，他可以使用半透明顏色，這在解決一些可視化的問題中還挺方便的。另外 SVG 內部可以使用 &amp;lt;g&amp;gt;&amp;lt;/g&amp;gt; 來任意嵌套，這在疊圖之類的事情還挺方便的。
這篇文的目的要記錄一些輔助我可視化函式，以防每次我都要重新想重新打，同時也給其他人參考。目前我是傾向使用 function-based 的設計而非 OOP，這樣在使用上會比較方便，這些函式應該全部放在同一個檔案，例如 svg.py 中，然後 import svg 來使用。
Basic Hint:
 g 可以任意嵌套 使用 x, y 而不是 r, c，原點在左上  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  from math import ceil from io import BytesIO from base64 import b64encode import numpy as np from PIL import Image import svgwrite as sw def g(elems): &amp;#39;&amp;#39;&amp;#39; &amp;#39;&amp;#39;&amp;#39; pass def pil(img): &amp;#39;&amp;#39;&amp;#39; &amp;#39;&amp;#39;&amp;#39; pass def img(img): &amp;#39;&amp;#39;&amp;#39; &amp;#39;&amp;#39;&amp;#39; pass def save(elems, fname, size, per_row=-1, padding=2, pad_val=None): &amp;#39;&amp;#39;&amp;#39; &amp;#39;&amp;#39;&amp;#39; pass def to_png(src_path, dst_path, scale=2): &amp;#39;&amp;#39;&amp;#39; &amp;#39;&amp;#39;&amp;#39; import cairosvg pass   COCO Keypoint Object Detection Segmentation  如果只是要畫畫圖表，我還是使用 matplotlib （記得指定 style 為 seaborn）然後輸出成 SVG（是的 matplotlib 可以輸出 svg，如果你還不知道的話記得嘗試看看）。 ↩ 如果是無法使用 SVG 的場合，例如 Facebook, Imgur, Google Docs，我會先用 cairosvg 將 SVG 轉成 PNG（scale 為 2），再做處理。 ↩   </description>
    </item>
    
  </channel>
</rss>