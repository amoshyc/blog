<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2018s on Yu-Cheng Huang</title>
    <link>http://amoshyc.github.io/blog/2018.html</link>
    <description>Recent content in 2018s on Yu-Cheng Huang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Jun 2018 23:33:36 +0800</lastBuildDate>
    
	<atom:link href="http://amoshyc.github.io/blog/2018/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>APT Scan: Image Correction</title>
      <link>http://amoshyc.github.io/blog/2018/apt-scan.html</link>
      <pubDate>Sat, 30 Jun 2018 23:33:36 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/apt-scan.html</guid>
      <description>Abstract Symbols Method APT-Scan 的流程如下：
 找出 $$I_(src)$$ 中目標的 4 個頂點。 估計出轉正後新圖 $$I_(dst)$$ 的大小 $$W = (T + B)//2, H=(L + R)//2$$，其中 $$T, B, L, R$$ 為 $$I_(src)$$ 中目標四條邊的邊長。 目標的 4 個頂點轉正後的座標一定會是新圖的 4 個角落，即他們在 $$C_(dst)$$ 的座標為 $$(0, 0), (W, 0), (W, H), (0, H)$$。 解出 $$C_(src)$$ 與 $$C_(dst)$$ 之間的關係：Homography Matrix $$H$$。 使用 Warp 將 $$I_(src)$$ 轉成 $$I_(dst)$$。  Detail Corners Detection Homography 我們會用到簡單的齊次座標，在此簡介一下，簡單來講齊次座標是為了延遲除法的運算所使用的座標表示法。至於為什麼我們要延遲除法呢，這是因為除法的運算成本相對於加減乘的運算是昂貴的，使用齊次座標可以把許多需要除法的運算轉成矩陣相剩乘，在當代的架構上可以有效的加速運算。
在齊次座標中，一個 2D 直角座標的點 $$(x, y)$$ 會用 3 個數來表示。如果在齊次座標中看到向量 $$(a, b, c)^T$$，那他實際是指直角座標中的 $$(a//c, b//c)$$。而這會造成一個有趣的事實：直角座標中任一點都會有不只一種的寫法，例如直角座標的點 $$(2, 3)$$ 用齊次座標可以寫成 $$(2, 3, 1)^T$$ 也可以寫成 $$(4, 6, 2)^T$$。</description>
    </item>
    
    <item>
      <title>在 Fedora 安裝 Zotero</title>
      <link>http://amoshyc.github.io/blog/2018/install-zotero-on-fedora.html</link>
      <pubDate>Thu, 07 Jun 2018 15:58:14 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/install-zotero-on-fedora.html</guid>
      <description>背景 最近因為在做計畫，大量地看論文，然後發現只使用 Chrome 的書籤已經不夠我管理這堆論文了，所以打算使用 Zotero 來管理。Zotero 是一個文獻管理軟體，不過目前為止我還沒要用到他生成 Reference 的功能，只是拿他來管理論文。跟他同性質的軟體包含 EndNote, Mendeley 等，不過看來看去，覺得 Zotero 應該是比較好的，而且有出 Linux 版本，讓我可以在 Fedora 上使用。
安裝 官方指示
下載 從官網下載針對 Linux 的壓縮檔即可，是用 Java 寫的。解壓後執行該資料夾中的 zotero（不是 zotero-bin 也不是 zotero.jar）。我個人解壓後的資料夾是 ~/Zotero_linux-x86_64/，不過你當然可以選你想要的地方。
建立 Desktop File 我想將 Zotero 加到 GNOME 的 Favorite 中，讓我方便快速啟動。方法為將 Zotero 的 Desktop File 加到 ~/.local/shared/applications/。照著官方指示做，在 Zotero 的資料夾中執行：
$ ./set_launcher_icon $ ln -s ~/Zotero_linux-x86_64/zotero.desktop ~/.local/share/applications/zotero.desktop  前者會將 Zotero Desktop File 的 Icon 欄位設定好。後者在目標資料夾建一個 symlink 到 Zotero 的 Desktop File。這樣你應該就可以在 GNOME 中直接搜到 Zotero 了，然後就可以右鍵將他加進 Favorite。</description>
    </item>
    
    <item>
      <title>最佳化 HW1</title>
      <link>http://amoshyc.github.io/blog/2018/ccu-optimization-hw1.html</link>
      <pubDate>Tue, 24 Apr 2018 13:29:33 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/ccu-optimization-hw1.html</guid>
      <description>Abstract 我實作了 2 種最佳化的方法：原始的 Gradient Descent 與帶 Momentum 的 Gradient Descent，然後在 4 個函式上應用這 2 種方法並進行比較。這 2 種方法都需要計算函式的導數（偏微分），我使用數值方法來計算導數而不使用代數方法。最後展示了每個函數的 1. 可視化 2. 隨著迭代的函式值 3. 隨著迭代 x 到全域最佳解的距離。
Environment 使用 Python 的科學計算環境在 Fedora 27 上完成這個作業：
 Python 3.6 Matplotlib Numpy Jupyter  程式碼放在 Github 上。如果想復現請在安裝好 Dependencies 後，在 Jupyter 中選 Cell/Run All。
Gradient Descent Numerical Gradient 我使用以下式子來求偏微分：
$$ (del)/(del x_i) f(bbx) = lim_(2h -&amp;gt; 0) (f(x_0, ..., x_i &amp;#43; h, ..., x_(n-1)) - f(x_0, .</description>
    </item>
    
    <item>
      <title>使用 Rime 在各大平臺安裝嘸蝦米輸入法</title>
      <link>http://amoshyc.github.io/blog/2018/install-liu-with-rime.html</link>
      <pubDate>Thu, 19 Apr 2018 13:28:26 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/install-liu-with-rime.html</guid>
      <description>前情提要 身為一個國小三年級就跟著我媽學嘸蝦米輸入法的人，我中文輸入法可以打到每分鐘 80 字左右。嘸蝦米只使用 26 個英文字母，很少選字，打出來的結果是確定性的（即不會根據你以前打過的字調整輸出結果），但最大的問題是他是專有軟體，且對 Linux 沒有很好的支援。在將我的主作業系統換到 Fedora 後，我得找一個方法讓我快樂地打嘸蝦米。而我找到的最終解答是使用 Rime 這個由佛振創立的 Open Source 輸入法框架。
Rime 預設不支援嘸蝦米，但在 Rime 要創一個輸入法是簡單的，尤其嘸蝦米這種其於碼表的輸入法。所需要的資料、設定檔我在幾年前就已經弄好了，但一直沒公開，只自己使用，畢竟感覺會有版權問題。但昨天看到這篇文章後，我決定還是來貢獻一下，於是就有了這篇文章。
Rime 可以執行在各大平臺上：Windows, Linux, Mac, Android, etc。但我本身只用也只有 Linux, Android, Windows，所以在下面只講解如何在這幾個平臺使用 Rime 安裝嘸蝦米。
Linux 底下以 Fedora 27 (GNOME, Wayland) 為例，當代的 Linux 預設的中文輸入法框架應該都是 ibus，應該都只要小修改即可使用。ibus 本身是一個框架，而 Rime 也是一個框架，透過 Rime 的 ibus 版本，我們可以將 Rime 整合進 ibus 裡。架構圖如下：
ibus: 英語（美式） 漢語（Rime）: 嘸蝦米 注音 ---------- ibus 透過「設定／地區與語言」下的「輸入來源」調整，按 Super + Space 切換輸入法。 Rime 透過 ~/.config/ibus/rime 的設定檔調整，按 Ctrl + ` 切換。  你也許會問為什麼不搞個基於 ibus 的嘸蝦米輸入法就好，還要嵌套個 Rime 呢？有兩個原因，第一是 ibus 讀嘸蝦米碼表的速度非常慢，每次切換成嘸蝦米時都得等上個幾秒，這是不可接受的。第二個原因是 rime 在各大平臺都有，我弄好一個基於 rime 的嘸蝦米輸入法，可以同時在 Linux, Windows, Android 上使用，這是 ibus 做不到的。</description>
    </item>
    
    <item>
      <title>Python 科學計算快速入門 2/2</title>
      <link>http://amoshyc.github.io/blog/2018/scientific-python-quickstart-2.html</link>
      <pubDate>Wed, 21 Mar 2018 11:38:58 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/scientific-python-quickstart-2.html</guid>
      <description>Numpy Tensor on CPU~
pip install numpy conda install -c anaconda numpy -n &amp;lt;venv&amp;gt;  1import numpy as np 2x = np.zeros((10, 10), dtype=np.float32) 3print(x.shape) # (10, 10) 4print(x.dtype) # dtype(&amp;#39;float32&amp;#39;) 5 6&amp;#39;&amp;#39;&amp;#39; Other dtypes: 7np.bool 8np.uint8 9np.int32 10&amp;#39;&amp;#39;&amp;#39; Creation 1x = np.array([1, 2, 3]) 2x = np.uint8([1, 2, 3]) 3 4x = np.arange(0.0, 10.0, 2) # array([0., 2., 4., 6., 8.]) 5x = np.zeros((10, 10, 10), dtype=np.float32) 6x = np.</description>
    </item>
    
    <item>
      <title>Python 科學計算快速入門 1/2</title>
      <link>http://amoshyc.github.io/blog/2018/scientific-python-quickstart-1.html</link>
      <pubDate>Tue, 20 Mar 2018 11:07:11 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/scientific-python-quickstart-1.html</guid>
      <description>Introduction Python
 Interpreter 一行一行執行 Use indention Python 3.6  Virtual Environment 主流是 Conda，共分兩個版本：Anaconda, Miniconda。前者預設就安裝了非常多的 package，所以要非常大的硬碟空間（3GB+）1。但大部份 package 我們都不會用，所以推薦使用 Miniconda。
安裝方法為去官方下載 bash，並執行，一般來說會將 conda 的執行檔加進系統的 bash：
Editor/IDE   ides   Input/Output 1 2 3 4  input() _ = input() x = input(&amp;#39;&amp;gt; &amp;#39;) # x is str x = int(input(&amp;#39;&amp;gt; &amp;#39;))    1 2 3 4 5 6 7 8 9 10 11 12 13 14  loss = 2e-1 acc = 0.</description>
    </item>
    
    <item>
      <title>Numpy 中實現二維高斯分佈</title>
      <link>http://amoshyc.github.io/blog/2018/implement-2d-gaussian-distribution-in-numpy.html</link>
      <pubDate>Sat, 03 Mar 2018 15:46:53 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/implement-2d-gaussian-distribution-in-numpy.html</guid>
      <description>前情 最近讀了 Pose Estimation 相關的論文，發現一些 Bottom Up 的方法 1 2 會直接生成各個 Keypoints 會哪，中間不經過 RPN 等方法。而生成的 Confidence Map 的 Ground Truth 是使用高斯分佈 (Gaussian Distribution) 來指示位置。但我翻了一下文檔，numpy 似乎沒有提供生成二維高斯分佈的函式，只提供從高斯分佈取樣的函式，於是我模彷了 skimage.draw 的 API，寫了一個函式。
實作原理 二維高斯分佈就是兩個一維高斯分佈取外積。於是我分別對 row 與 col 各生成一個高斯分佈，函數 domain 為 $$ [sigma-3sigma, sigma+3sigma] $$，因為是整數域，共 $$ 6sigma + 1 $$ 個值。然後將這兩個分佈使用 np.outer 即為所求。
程式碼 Hint!  此函式不支援 double 型態的 mu 與 sigma！
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  def gaussian2d(mu, sigma, shape=None): &amp;#34;&amp;#34;&amp;#34;Generate 2d gaussian distribution coordinates and values.</description>
    </item>
    
    <item>
      <title>工作站 bash 的顏色渲染</title>
      <link>http://amoshyc.github.io/blog/2018/syntax-highlighting-of-bash.html</link>
      <pubDate>Fri, 23 Feb 2018 11:34:06 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/syntax-highlighting-of-bash.html</guid>
      <description> 前情提要 學校工作站預設的 shell 是 csh，用的很不習慣，而且也有一些 bug。 可以切換成 bash 但沒有顏色渲染，今天查了一下資料，筆記一下。
顏色渲染 更改 ls 的顏色，在 .bashrc 中加入
alias ls=&amp;#39;ls --color=auto&amp;#39; alias ll=&amp;#39;ls -alh --color=auto&amp;#39; 更改 prompt 顏色，這個指令來自 這，一樣在 .bashrc 中加入
PS1=&amp;#39;\[\033[1;36m\]\u\[\033[1;31m\]@\[\033[1;32m\]\h:\[\033[1;35m\]\w\[\033[1;31m\]\$\[\033[0m\] &amp;#39; 結果 </description>
    </item>
    
    <item>
      <title>使用 Python 寄發 Gmail</title>
      <link>http://amoshyc.github.io/blog/2018/sending-gmail-in-python.html</link>
      <pubDate>Thu, 22 Feb 2018 17:32:32 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/sending-gmail-in-python.html</guid>
      <description>前情提要 之前跟學長在聊天，聊到他需要寄大量通知信給許多人，但希望每封信都有對方的名字。剛好有興趣，就搜了一下網路上的範例，整理出一個使用 python 3.x 從 Gmail 寄發 email 的程式。使用 SMTP、登入並且信件 SSL 加密。修改一下、加個迴圈就可以讓你的 gmail 大量寄垃圾信了（笑~
程式碼 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import smtplib from email.mime.text import MIMEText gmail_user = &amp;#39;amoshuangyc@gmail.com&amp;#39; gmail_password = &amp;#39;---&amp;#39; # your gmail password msg = MIMEText(&amp;#39;content&amp;#39;) msg[&amp;#39;Subject&amp;#39;] = &amp;#39;Test&amp;#39; msg[&amp;#39;From&amp;#39;] = gmail_user msg[&amp;#39;To&amp;#39;] = &amp;#39;xxx@gmail.com&amp;#39; server = smtplib.SMTP_SSL(&amp;#39;smtp.gmail.com&amp;#39;, 465) server.ehlo() server.login(gmail_user, gmail_password) server.</description>
    </item>
    
    <item>
      <title>在 Fedora 25 安裝 Matlab R2016a</title>
      <link>http://amoshyc.github.io/blog/2018/install-matlab-on-fedora-25.html</link>
      <pubDate>Thu, 22 Feb 2018 14:48:22 +0800</pubDate>
      
      <guid>http://amoshyc.github.io/blog/2018/install-matlab-on-fedora-25.html</guid>
      <description>Introduction 學校部份課堂會需要使用 Matlab，包含 Computer Vision, Machine Learning, etc。因為我電腦是裝雙系統，之前 Matlab 都裝在 Windows 下，並在 Windows 下使用，但實在覺得切換系統太麻煩了，而且針對一份作業我都是先用 Python 寫一個版本再用 Matlab 寫，當結果不一致時得不斷切換系統來 debug，太花時間。於是我決定裝 Matlab 裝到 Fedora 下，我就可以整天都待在 Fedora 上了。
Installation  下載 linux 版的 Matlab, network.lic 跟說明文件，學校一般都有提供。   Mount 該 iso 檔。這裡你有兩種方法，一個是傳統地用 mount 指令，另一個是在 Nautilus 中，直接在 iso 上點兩下（預設是用 Disk Image Mounter 開啟）。這裡使用第二種方法。這時可以從 Other locations 中看到 Matlab 被 mount 了。   開啟 Terminal，cd 到 /run/media/&amp;lt;user&amp;gt;/MATLAB_R2016A/ （這是預設 mount 的位置），執行 ./install。注意這裡不要加 sudo （加了會失敗，尚不清楚原因）。之後 matlab 安裝視窗就會出現。照著安裝步驟走即可。 但因為沒給 sudo 權限，無法安裝到 /usr/local/ 等位置，所以我安裝到 ~/Matlab。  Desktop Application 不想每次都從 command line 開啟，可以從 這裡 下載兩個檔案，並將：</description>
    </item>
    
  </channel>
</rss>